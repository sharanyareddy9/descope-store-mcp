"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsufficientScopeError = exports.InvalidClientMetadataError = exports.MethodNotAllowedError = exports.InvalidTokenError = exports.ServerError = exports.InvalidRequestError = exports.OAuthError = void 0;
/**
 * Base class for all OAuth errors that provides standardized error handling and response formatting.
 * This class implements the OAuth 2.0 error response format as specified in RFC 6749.
 */
class OAuthError extends Error {
    constructor(errorCode, message, errorUri) {
        super(message);
        this.errorCode = errorCode;
        this.errorUri = errorUri;
        this.name = this.constructor.name;
    }
    /**
     * Converts the error to a standard OAuth error response object that follows the OAuth 2.0 specification.
     * The response includes the error code, description, and optional URI for additional error information.
     */
    toResponseObject() {
        const response = {
            error: this.errorCode,
            error_description: this.message,
        };
        if (this.errorUri) {
            response.error_uri = this.errorUri;
        }
        return response;
    }
}
exports.OAuthError = OAuthError;
/**
 * Invalid request error (400) - Request is malformed or invalid.
 * Common causes:
 * - Missing required parameters
 * - Invalid parameter values
 * - Duplicate parameters
 */
class InvalidRequestError extends OAuthError {
    constructor(message, errorUri) {
        super("invalid_request", message, errorUri);
    }
}
exports.InvalidRequestError = InvalidRequestError;
/**
 * Server error (500) - Unexpected server condition preventing request fulfillment.
 * Use when no other specific error code is appropriate.
 */
class ServerError extends OAuthError {
    constructor(message, errorUri) {
        super("server_error", message, errorUri);
    }
}
exports.ServerError = ServerError;
/**
 * Invalid token error (401) - Access token is invalid or expired.
 * Common causes:
 * - Expired token
 * - Revoked token
 * - Invalid format
 * - Wrong client
 */
class InvalidTokenError extends OAuthError {
    constructor(message, errorUri) {
        super("invalid_token", message, errorUri);
    }
}
exports.InvalidTokenError = InvalidTokenError;
/**
 * Method not allowed error (405) - HTTP method not supported for endpoint.
 * Custom extension of OAuth 2.0 for clearer method validation feedback.
 */
class MethodNotAllowedError extends OAuthError {
    constructor(message, errorUri) {
        super("method_not_allowed", message, errorUri);
    }
}
exports.MethodNotAllowedError = MethodNotAllowedError;
/**
 * Invalid client metadata error (400) - Client registration metadata is invalid per RFC 7591.
 * Common causes:
 * - Missing required fields
 * - Invalid values
 * - Format errors
 * - Policy violations
 */
class InvalidClientMetadataError extends OAuthError {
    constructor(message, errorUri) {
        super("invalid_client_metadata", message, errorUri);
    }
}
exports.InvalidClientMetadataError = InvalidClientMetadataError;
/**
 * Insufficient scope error (403) - Token lacks required permissions.
 * Common causes:
 * - Too narrow scope
 * - Restricted permissions
 * - Privilege requirements
 */
class InsufficientScopeError extends OAuthError {
    constructor(message, errorUri) {
        super("insufficient_scope", message, errorUri);
    }
}
exports.InsufficientScopeError = InsufficientScopeError;
//# sourceMappingURL=errors.js.map