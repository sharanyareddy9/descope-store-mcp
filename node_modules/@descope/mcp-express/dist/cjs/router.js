"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.descopeMcpAuthRouter = descopeMcpAuthRouter;
const express_1 = __importDefault(require("express"));
const authorize_js_1 = require("./handlers/authorize.js");
const metadata_js_1 = require("./handlers/metadata.js");
const register_js_1 = require("./handlers/register.js");
const protectedResource_js_1 = require("./handlers/protectedResource.js");
const mcpServer_js_1 = require("./handlers/mcpServer.js");
const provider_js_1 = require("./provider.js");
const bearerAuth_js_1 = require("./middleware/bearerAuth.js");
/**
 * Creates an MCP-compliant router with OAuth 2.0 Resource Server capabilities.
 *
 * By default, this router provides:
 * - Protected Resource Metadata (RFC 8705) - ALWAYS enabled
 * - Authorization Server Metadata (RFC 8414) - ALWAYS enabled
 * - MCP server endpoint (/mcp) - ALWAYS enabled with authentication
 * - Authorization Server endpoints (/authorize, /register) - DISABLED by default
 *
 * Most MCP servers should operate as Resource Servers, not Authorization Servers.
 * To enable Authorization Server functionality, set authorizationServerOptions.isDisabled = false.
 *
 * This router MUST be installed at the application root, like so:
 *
 *  const app = express();
 *  app.use(descopeMcpAuthRouter(...));
 */
function descopeMcpAuthRouter(toolRegistration, provider) {
    var _a, _b;
    const authProvider = provider || new provider_js_1.DescopeMcpProvider();
    const router = express_1.default.Router();
    // Always provide metadata endpoints (required for MCP 2025-06-18 compliance)
    router.use("/.well-known/oauth-authorization-server", (0, metadata_js_1.metadataHandler)(authProvider));
    router.use("/.well-known/oauth-protected-resource", (0, protectedResource_js_1.protectedResourceHandler)(authProvider));
    // MCP server endpoint - bearer auth always enabled, server handler only when tools are registered
    if (toolRegistration) {
        router.post("/mcp", (0, bearerAuth_js_1.descopeMcpBearerAuth)(authProvider), (0, mcpServer_js_1.createMcpServerHandler)({
            name: "descope-mcp-server",
            version: "1.0.0",
        }, toolRegistration, authProvider.options));
    }
    else {
        router.use("/mcp", (0, bearerAuth_js_1.descopeMcpBearerAuth)(authProvider));
    }
    // Authorization Server endpoints are disabled by default
    // Enable them only if explicitly configured
    const authServerOptions = authProvider.options.authorizationServerOptions;
    const isAuthServerDisabled = (_a = authServerOptions === null || authServerOptions === void 0 ? void 0 : authServerOptions.isDisabled) !== null && _a !== void 0 ? _a : true;
    if (!isAuthServerDisabled) {
        // Enable /authorize endpoint if Authorization Server is enabled
        if ((authServerOptions === null || authServerOptions === void 0 ? void 0 : authServerOptions.enableAuthorizeEndpoint) !== false) {
            // OAuth 2.1 scope handling - see README for details
            router.use("/authorize", (0, authorize_js_1.authorizationHandler)(authProvider));
        }
        // Enable dynamic client registration if configured
        if ((authServerOptions === null || authServerOptions === void 0 ? void 0 : authServerOptions.enableDynamicClientRegistration) !== false &&
            !((_b = authProvider.options.dynamicClientRegistrationOptions) === null || _b === void 0 ? void 0 : _b.isDisabled)) {
            router.use("/register", (0, register_js_1.registrationHandler)(authProvider));
        }
    }
    return router;
}
//# sourceMappingURL=router.js.map