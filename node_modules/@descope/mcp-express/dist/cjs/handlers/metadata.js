"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.metadataHandler = metadataHandler;
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const allowedMethods_js_1 = require("../middleware/allowedMethods.js");
function metadataHandler(provider) {
    var _a, _b, _c, _d, _e, _f, _g;
    const baseUrl = provider.baseUrl;
    const projectId = provider.projectId;
    const issuer = new URL(projectId, baseUrl);
    const authorization_endpoint = new URL("/authorize", provider.serverUrl).href;
    const token_endpoint = provider.descopeOAuthEndpoints.token.href;
    const registration_endpoint = ((_a = provider.options
        .dynamicClientRegistrationOptions) === null || _a === void 0 ? void 0 : _a.isDisabled)
        ? undefined
        : new URL("/register", provider.serverUrl).href;
    const revocation_endpoint = provider.descopeOAuthEndpoints.revocation.href;
    const scopes_supported_attribute = (_d = (_c = (_b = provider.options.dynamicClientRegistrationOptions) === null || _b === void 0 ? void 0 : _b.attributeScopes) === null || _c === void 0 ? void 0 : _c.map((scope) => scope.name)) !== null && _d !== void 0 ? _d : [];
    const scopes_support_permission = (_g = (_f = (_e = provider.options.dynamicClientRegistrationOptions) === null || _e === void 0 ? void 0 : _e.permissionScopes) === null || _f === void 0 ? void 0 : _f.map((scope) => scope.name)) !== null && _g !== void 0 ? _g : [];
    const scopes_supported = [
        ...scopes_supported_attribute,
        ...scopes_support_permission,
    ];
    const metadata = {
        issuer: issuer.href,
        service_documentation: provider.options.serviceDocumentationUrl,
        authorization_endpoint,
        response_types_supported: ["code"],
        code_challenge_methods_supported: ["S256"],
        token_endpoint,
        token_endpoint_auth_methods_supported: ["client_secret_post"],
        grant_types_supported: ["authorization_code", "refresh_token"],
        revocation_endpoint,
        revocation_endpoint_auth_methods_supported: revocation_endpoint
            ? ["client_secret_post"]
            : undefined,
        registration_endpoint,
        scopes_supported: ["openid", ...scopes_supported],
    };
    // Nested router so we can configure middleware and restrict HTTP method
    const router = express_1.default.Router();
    // Configure CORS to allow any origin, to make accessible to web-based MCP clients
    router.use((0, cors_1.default)());
    router.use((0, allowedMethods_js_1.allowedMethods)(["GET"]));
    router.get("/", (req, res) => {
        res.status(200).json(metadata);
    });
    return router;
}
//# sourceMappingURL=metadata.js.map