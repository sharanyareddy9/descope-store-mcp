"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authorizationHandler = authorizationHandler;
const express_1 = __importDefault(require("express"));
const allowedMethods_js_1 = require("../middleware/allowedMethods.js");
function authorizationHandler(provider) {
    const router = express_1.default.Router();
    router.use((0, allowedMethods_js_1.allowedMethods)(["GET", "POST"]));
    router.use(express_1.default.urlencoded({ extended: false }));
    router.all("/", (req, res) => {
        const params = req.method === "POST" ? req.body : req.query;
        // If no scope is provided, add the default openid scope
        // While Descope handles empty scopes by returning defaults, we ensure consistency
        if (!params.scope) {
            params.scope = "openid";
        }
        // Redirect to the Descope authorization URL with all parameters
        const targetUrl = provider.descopeOAuthEndpoints.authorization;
        targetUrl.search = new URLSearchParams(params).toString();
        res.redirect(targetUrl.toString());
    });
    return router;
}
//# sourceMappingURL=authorize.js.map