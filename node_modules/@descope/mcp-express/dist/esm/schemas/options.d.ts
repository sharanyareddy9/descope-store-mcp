import { z } from "zod";
/**
 * Base scope definition with common properties.
 */
export declare const ScopeSchema: z.ZodObject<{
    /** Name of the scope */
    name: z.ZodString;
    /** Optional description of the scope */
    description: z.ZodOptional<z.ZodString>;
    /** Whether this scope is required */
    required: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    description?: string | undefined;
    required?: boolean | undefined;
}, {
    name: string;
    description?: string | undefined;
    required?: boolean | undefined;
}>;
/**
 * Scope definition for attribute access.
 */
export declare const AttributeScopeSchema: z.ZodObject<{
    /** Name of the scope */
    name: z.ZodString;
    /** Optional description of the scope */
    description: z.ZodOptional<z.ZodString>;
    /** Whether this scope is required */
    required: z.ZodOptional<z.ZodBoolean>;
} & {
    /** List of attributes that can be accessed */
    attributes: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    attributes: string[];
    description?: string | undefined;
    required?: boolean | undefined;
}, {
    name: string;
    attributes: string[];
    description?: string | undefined;
    required?: boolean | undefined;
}>;
/**
 * Scope definition for permission access.
 */
export declare const PermissionScopeSchema: z.ZodObject<{
    /** Name of the scope */
    name: z.ZodString;
    /** Optional description of the scope */
    description: z.ZodOptional<z.ZodString>;
    /** Whether this scope is required */
    required: z.ZodOptional<z.ZodBoolean>;
} & {
    /** List of roles that can be accessed */
    roles: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    name: string;
    description?: string | undefined;
    required?: boolean | undefined;
    roles?: string[] | undefined;
}, {
    name: string;
    description?: string | undefined;
    required?: boolean | undefined;
    roles?: string[] | undefined;
}>;
/**
 * Options for verifying access tokens.
 */
export declare const VerifyTokenOptionsSchema: z.ZodObject<{
    /** Scopes to verify against the token */
    requiredScopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /** Audience(s) to verify against the token */
    audience: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /** Key to use for token verification */
    key: z.ZodOptional<z.ZodUnion<[z.ZodAny, z.ZodString]>>;
    /** Resource indicator to validate according to RFC 8707 */
    resourceIndicator: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    requiredScopes?: string[] | undefined;
    audience?: string[] | undefined;
    key?: any;
    resourceIndicator?: string | undefined;
}, {
    requiredScopes?: string[] | undefined;
    audience?: string[] | undefined;
    key?: any;
    resourceIndicator?: string | undefined;
}>;
/**
 * Configuration for dynamic client registration functionality.
 */
export declare const DynamicClientRegistrationOptionsSchema: z.ZodObject<{
    /** Whether dynamic client registration is enabled */
    isDisabled: z.ZodOptional<z.ZodBoolean>;
    /** URL for the authentication flow */
    authPageUrl: z.ZodOptional<z.ZodString>;
    /** Scopes for attribute access */
    attributeScopes: z.ZodOptional<z.ZodArray<z.ZodObject<{
        /** Name of the scope */
        name: z.ZodString;
        /** Optional description of the scope */
        description: z.ZodOptional<z.ZodString>;
        /** Whether this scope is required */
        required: z.ZodOptional<z.ZodBoolean>;
    } & {
        /** List of attributes that can be accessed */
        attributes: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        attributes: string[];
        description?: string | undefined;
        required?: boolean | undefined;
    }, {
        name: string;
        attributes: string[];
        description?: string | undefined;
        required?: boolean | undefined;
    }>, "many">>;
    /** Scopes for permission access */
    permissionScopes: z.ZodOptional<z.ZodArray<z.ZodObject<{
        /** Name of the scope */
        name: z.ZodString;
        /** Optional description of the scope */
        description: z.ZodOptional<z.ZodString>;
        /** Whether this scope is required */
        required: z.ZodOptional<z.ZodBoolean>;
    } & {
        /** List of roles that can be accessed */
        roles: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description?: string | undefined;
        required?: boolean | undefined;
        roles?: string[] | undefined;
    }, {
        name: string;
        description?: string | undefined;
        required?: boolean | undefined;
        roles?: string[] | undefined;
    }>, "many">>;
    /** Logo for the client */
    logo: z.ZodOptional<z.ZodString>;
    /** Whether the client is confidential */
    nonConfidentialClient: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    isDisabled?: boolean | undefined;
    authPageUrl?: string | undefined;
    attributeScopes?: {
        name: string;
        attributes: string[];
        description?: string | undefined;
        required?: boolean | undefined;
    }[] | undefined;
    permissionScopes?: {
        name: string;
        description?: string | undefined;
        required?: boolean | undefined;
        roles?: string[] | undefined;
    }[] | undefined;
    logo?: string | undefined;
    nonConfidentialClient?: boolean | undefined;
}, {
    isDisabled?: boolean | undefined;
    authPageUrl?: string | undefined;
    attributeScopes?: {
        name: string;
        attributes: string[];
        description?: string | undefined;
        required?: boolean | undefined;
    }[] | undefined;
    permissionScopes?: {
        name: string;
        description?: string | undefined;
        required?: boolean | undefined;
        roles?: string[] | undefined;
    }[] | undefined;
    logo?: string | undefined;
    nonConfidentialClient?: boolean | undefined;
}>;
/**
 * Configuration for OAuth 2.0 Authorization Server functionality.
 */
export declare const AuthorizationServerOptionsSchema: z.ZodObject<{
    /** Whether the Authorization Server endpoints are disabled (default: true) */
    isDisabled: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    /** Whether to enable the /authorize endpoint */
    enableAuthorizeEndpoint: z.ZodOptional<z.ZodBoolean>;
    /** Whether to enable dynamic client registration */
    enableDynamicClientRegistration: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    isDisabled: boolean;
    enableAuthorizeEndpoint?: boolean | undefined;
    enableDynamicClientRegistration?: boolean | undefined;
}, {
    isDisabled?: boolean | undefined;
    enableAuthorizeEndpoint?: boolean | undefined;
    enableDynamicClientRegistration?: boolean | undefined;
}>;
/**
 * Configuration options for the Descope MCP SDK.
 */
export declare const DescopeMcpProviderOptionsSchema: z.ZodObject<{
    /** The Descope project ID */
    projectId: z.ZodOptional<z.ZodString>;
    /** The Descope management key for administrative operations */
    managementKey: z.ZodOptional<z.ZodString>;
    /** Descope endpoints are usually hosted on a different subdomain or domain
     * versus the MCP Server itself. This MCP Server URL allows us to
     * handle Dynamic Client Registration on a local server path.
     *  **/
    serverUrl: z.ZodOptional<z.ZodString>;
    /** The Descope base URL if a custom domain is set */
    baseUrl: z.ZodOptional<z.ZodString>;
    /** Options for dynamic client registration */
    dynamicClientRegistrationOptions: z.ZodOptional<z.ZodObject<{
        /** Whether dynamic client registration is enabled */
        isDisabled: z.ZodOptional<z.ZodBoolean>;
        /** URL for the authentication flow */
        authPageUrl: z.ZodOptional<z.ZodString>;
        /** Scopes for attribute access */
        attributeScopes: z.ZodOptional<z.ZodArray<z.ZodObject<{
            /** Name of the scope */
            name: z.ZodString;
            /** Optional description of the scope */
            description: z.ZodOptional<z.ZodString>;
            /** Whether this scope is required */
            required: z.ZodOptional<z.ZodBoolean>;
        } & {
            /** List of attributes that can be accessed */
            attributes: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            attributes: string[];
            description?: string | undefined;
            required?: boolean | undefined;
        }, {
            name: string;
            attributes: string[];
            description?: string | undefined;
            required?: boolean | undefined;
        }>, "many">>;
        /** Scopes for permission access */
        permissionScopes: z.ZodOptional<z.ZodArray<z.ZodObject<{
            /** Name of the scope */
            name: z.ZodString;
            /** Optional description of the scope */
            description: z.ZodOptional<z.ZodString>;
            /** Whether this scope is required */
            required: z.ZodOptional<z.ZodBoolean>;
        } & {
            /** List of roles that can be accessed */
            roles: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description?: string | undefined;
            required?: boolean | undefined;
            roles?: string[] | undefined;
        }, {
            name: string;
            description?: string | undefined;
            required?: boolean | undefined;
            roles?: string[] | undefined;
        }>, "many">>;
        /** Logo for the client */
        logo: z.ZodOptional<z.ZodString>;
        /** Whether the client is confidential */
        nonConfidentialClient: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        isDisabled?: boolean | undefined;
        authPageUrl?: string | undefined;
        attributeScopes?: {
            name: string;
            attributes: string[];
            description?: string | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        permissionScopes?: {
            name: string;
            description?: string | undefined;
            required?: boolean | undefined;
            roles?: string[] | undefined;
        }[] | undefined;
        logo?: string | undefined;
        nonConfidentialClient?: boolean | undefined;
    }, {
        isDisabled?: boolean | undefined;
        authPageUrl?: string | undefined;
        attributeScopes?: {
            name: string;
            attributes: string[];
            description?: string | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        permissionScopes?: {
            name: string;
            description?: string | undefined;
            required?: boolean | undefined;
            roles?: string[] | undefined;
        }[] | undefined;
        logo?: string | undefined;
        nonConfidentialClient?: boolean | undefined;
    }>>;
    /** Options for Authorization Server endpoints */
    authorizationServerOptions: z.ZodOptional<z.ZodObject<{
        /** Whether the Authorization Server endpoints are disabled (default: true) */
        isDisabled: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        /** Whether to enable the /authorize endpoint */
        enableAuthorizeEndpoint: z.ZodOptional<z.ZodBoolean>;
        /** Whether to enable dynamic client registration */
        enableDynamicClientRegistration: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        isDisabled: boolean;
        enableAuthorizeEndpoint?: boolean | undefined;
        enableDynamicClientRegistration?: boolean | undefined;
    }, {
        isDisabled?: boolean | undefined;
        enableAuthorizeEndpoint?: boolean | undefined;
        enableDynamicClientRegistration?: boolean | undefined;
    }>>;
    /** Options for token verification */
    verifyTokenOptions: z.ZodOptional<z.ZodObject<{
        /** Scopes to verify against the token */
        requiredScopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        /** Audience(s) to verify against the token */
        audience: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        /** Key to use for token verification */
        key: z.ZodOptional<z.ZodUnion<[z.ZodAny, z.ZodString]>>;
        /** Resource indicator to validate according to RFC 8707 */
        resourceIndicator: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        requiredScopes?: string[] | undefined;
        audience?: string[] | undefined;
        key?: any;
        resourceIndicator?: string | undefined;
    }, {
        requiredScopes?: string[] | undefined;
        audience?: string[] | undefined;
        key?: any;
        resourceIndicator?: string | undefined;
    }>>;
    /** Human readable documentation */
    serviceDocumentationUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    projectId?: string | undefined;
    managementKey?: string | undefined;
    serverUrl?: string | undefined;
    baseUrl?: string | undefined;
    dynamicClientRegistrationOptions?: {
        isDisabled?: boolean | undefined;
        authPageUrl?: string | undefined;
        attributeScopes?: {
            name: string;
            attributes: string[];
            description?: string | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        permissionScopes?: {
            name: string;
            description?: string | undefined;
            required?: boolean | undefined;
            roles?: string[] | undefined;
        }[] | undefined;
        logo?: string | undefined;
        nonConfidentialClient?: boolean | undefined;
    } | undefined;
    authorizationServerOptions?: {
        isDisabled: boolean;
        enableAuthorizeEndpoint?: boolean | undefined;
        enableDynamicClientRegistration?: boolean | undefined;
    } | undefined;
    verifyTokenOptions?: {
        requiredScopes?: string[] | undefined;
        audience?: string[] | undefined;
        key?: any;
        resourceIndicator?: string | undefined;
    } | undefined;
    serviceDocumentationUrl?: string | undefined;
}, {
    projectId?: string | undefined;
    managementKey?: string | undefined;
    serverUrl?: string | undefined;
    baseUrl?: string | undefined;
    dynamicClientRegistrationOptions?: {
        isDisabled?: boolean | undefined;
        authPageUrl?: string | undefined;
        attributeScopes?: {
            name: string;
            attributes: string[];
            description?: string | undefined;
            required?: boolean | undefined;
        }[] | undefined;
        permissionScopes?: {
            name: string;
            description?: string | undefined;
            required?: boolean | undefined;
            roles?: string[] | undefined;
        }[] | undefined;
        logo?: string | undefined;
        nonConfidentialClient?: boolean | undefined;
    } | undefined;
    authorizationServerOptions?: {
        isDisabled?: boolean | undefined;
        enableAuthorizeEndpoint?: boolean | undefined;
        enableDynamicClientRegistration?: boolean | undefined;
    } | undefined;
    verifyTokenOptions?: {
        requiredScopes?: string[] | undefined;
        audience?: string[] | undefined;
        key?: any;
        resourceIndicator?: string | undefined;
    } | undefined;
    serviceDocumentationUrl?: string | undefined;
}>;
export type Scope = z.infer<typeof ScopeSchema>;
export type AttributeScope = z.infer<typeof AttributeScopeSchema>;
export type PermissionScope = z.infer<typeof PermissionScopeSchema>;
export type VerifyTokenOptions = z.infer<typeof VerifyTokenOptionsSchema>;
export type DynamicClientRegistrationOptions = z.infer<typeof DynamicClientRegistrationOptionsSchema>;
export type AuthorizationServerOptions = z.infer<typeof AuthorizationServerOptionsSchema>;
export type DescopeMcpProviderOptions = z.infer<typeof DescopeMcpProviderOptionsSchema>;
//# sourceMappingURL=options.d.ts.map