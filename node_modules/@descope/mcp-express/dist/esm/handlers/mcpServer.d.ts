import { RequestHandler } from "express";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { DescopeMcpProviderOptions } from "../schemas/options.js";
/**
 * MCP server configuration options
 */
export interface McpServerConfig {
    name?: string;
    version?: string;
    capabilities?: Record<string, unknown>;
}
/**
 * Creates an Express request handler that implements the MCP protocol
 * with Descope authentication integration.
 *
 * @param serverConfig - Configuration for the MCP server
 * @param toolRegistration - Function to register tools with the server
 * @param descopeConfig - Configuration for outbound token exchange
 *
 * @example
 * ```typescript
 * const mcpHandler = createMcpServerHandler(
 *   { name: "my-mcp-server", version: "1.0.0" },
 *   (server) => {
 *     const getUserTool = registerAuthenticatedTool({...});
 *     getUserTool(server);
 *   }
 * );
 *
 * app.post("/mcp", descopeMcpBearerAuth(), mcpHandler);
 * ```
 */
export declare function createMcpServerHandler(serverConfig?: McpServerConfig, toolRegistration?: (server: McpServer) => void, descopeConfig?: DescopeMcpProviderOptions): RequestHandler;
//# sourceMappingURL=mcpServer.d.ts.map