import express from "express";
import cors from "cors";
import { allowedMethods } from "../middleware/allowedMethods.js";
export function protectedResourceHandler(provider) {
    var _a, _b, _c, _d, _e, _f;
    const serverUrl = provider.serverUrl;
    const authorizationServer = provider.descopeOAuthEndpoints.issuer.href;
    // Build scopes from configured attribute and permission scopes
    const attributeScopes = (_c = (_b = (_a = provider.options.dynamicClientRegistrationOptions) === null || _a === void 0 ? void 0 : _a.attributeScopes) === null || _b === void 0 ? void 0 : _b.map((scope) => scope.name)) !== null && _c !== void 0 ? _c : [];
    const permissionScopes = (_f = (_e = (_d = provider.options.dynamicClientRegistrationOptions) === null || _d === void 0 ? void 0 : _d.permissionScopes) === null || _e === void 0 ? void 0 : _e.map((scope) => scope.name)) !== null && _f !== void 0 ? _f : [];
    const scopes_supported = ["openid", ...attributeScopes, ...permissionScopes];
    const metadata = {
        resource: serverUrl,
        authorization_servers: [authorizationServer],
        scopes_supported,
        bearer_methods_supported: ["header"],
        resource_documentation: provider.options.serviceDocumentationUrl,
    };
    // Nested router so we can configure middleware and restrict HTTP method
    const router = express.Router();
    // Configure CORS to allow any origin, to make accessible to web-based MCP clients
    router.use(cors());
    router.use(allowedMethods(["GET"]));
    router.get("/", (_req, res) => {
        res.status(200).json(metadata);
    });
    return router;
}
//# sourceMappingURL=protectedResource.js.map