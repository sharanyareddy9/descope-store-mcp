import express from "express";
import { authorizationHandler } from "./handlers/authorize.js";
import { metadataHandler } from "./handlers/metadata.js";
import { registrationHandler } from "./handlers/register.js";
import { protectedResourceHandler } from "./handlers/protectedResource.js";
import { createMcpServerHandler } from "./handlers/mcpServer.js";
import { DescopeMcpProvider } from "./provider.js";
import { descopeMcpBearerAuth } from "./middleware/bearerAuth.js";
/**
 * Creates an MCP-compliant router with OAuth 2.0 Resource Server capabilities.
 *
 * By default, this router provides:
 * - Protected Resource Metadata (RFC 8705) - ALWAYS enabled
 * - Authorization Server Metadata (RFC 8414) - ALWAYS enabled
 * - MCP server endpoint (/mcp) - ALWAYS enabled with authentication
 * - Authorization Server endpoints (/authorize, /register) - DISABLED by default
 *
 * Most MCP servers should operate as Resource Servers, not Authorization Servers.
 * To enable Authorization Server functionality, set authorizationServerOptions.isDisabled = false.
 *
 * This router MUST be installed at the application root, like so:
 *
 *  const app = express();
 *  app.use(descopeMcpAuthRouter(...));
 */
export function descopeMcpAuthRouter(toolRegistration, provider) {
    var _a, _b;
    const authProvider = provider || new DescopeMcpProvider();
    const router = express.Router();
    // Always provide metadata endpoints (required for MCP 2025-06-18 compliance)
    router.use("/.well-known/oauth-authorization-server", metadataHandler(authProvider));
    router.use("/.well-known/oauth-protected-resource", protectedResourceHandler(authProvider));
    // MCP server endpoint - bearer auth always enabled, server handler only when tools are registered
    if (toolRegistration) {
        router.post("/mcp", descopeMcpBearerAuth(authProvider), createMcpServerHandler({
            name: "descope-mcp-server",
            version: "1.0.0",
        }, toolRegistration, authProvider.options));
    }
    else {
        router.use("/mcp", descopeMcpBearerAuth(authProvider));
    }
    // Authorization Server endpoints are disabled by default
    // Enable them only if explicitly configured
    const authServerOptions = authProvider.options.authorizationServerOptions;
    const isAuthServerDisabled = (_a = authServerOptions === null || authServerOptions === void 0 ? void 0 : authServerOptions.isDisabled) !== null && _a !== void 0 ? _a : true;
    if (!isAuthServerDisabled) {
        // Enable /authorize endpoint if Authorization Server is enabled
        if ((authServerOptions === null || authServerOptions === void 0 ? void 0 : authServerOptions.enableAuthorizeEndpoint) !== false) {
            // OAuth 2.1 scope handling - see README for details
            router.use("/authorize", authorizationHandler(authProvider));
        }
        // Enable dynamic client registration if configured
        if ((authServerOptions === null || authServerOptions === void 0 ? void 0 : authServerOptions.enableDynamicClientRegistration) !== false &&
            !((_b = authProvider.options.dynamicClientRegistrationOptions) === null || _b === void 0 ? void 0 : _b.isDisabled)) {
            router.use("/register", registrationHandler(authProvider));
        }
    }
    return router;
}
//# sourceMappingURL=router.js.map