import { getOutboundToken } from "./utils/outboundToken.js";
import { getRequestContext, } from "./utils/requestContext.js";
/**
 * Validates scopes against the authenticated user's scopes
 */
export function validateScopes(authInfo, requiredScopes = []) {
    if (requiredScopes.length === 0) {
        return { isValid: true };
    }
    const userScopes = authInfo.scopes || [];
    const missingScopes = requiredScopes.filter((scope) => !userScopes.includes(scope));
    if (missingScopes.length > 0) {
        const userScopes = authInfo.scopes || [];
        return {
            isValid: false,
            error: `Missing required scopes: ${missingScopes.join(", ")}. User has scopes: ${userScopes.length > 0 ? userScopes.join(", ") : "none"}`,
        };
    }
    return { isValid: true };
}
/* -----------------------------------------------------------------------
 * Scope validation helpers
 * -------------------------------------------------------------------- */
/**
 * Checks if the user has a specific scope
 */
export function hasScope(authInfo, scope) {
    var _a;
    return ((_a = authInfo.scopes) === null || _a === void 0 ? void 0 : _a.includes(scope)) || false;
}
/**
 * Checks if the user has any of the provided scopes
 */
export function hasAnyScope(authInfo, scopes) {
    return scopes.some((scope) => hasScope(authInfo, scope));
}
/**
 * Checks if the user has all of the provided scopes
 */
export function hasAllScopes(authInfo, scopes) {
    return scopes.every((scope) => hasScope(authInfo, scope));
}
/* -----------------------------------------------------------------------
 * Implementation (shared)
 * -------------------------------------------------------------------- */
export function registerAuthenticatedTool(name, config, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
cb, requiredScopes = []) {
    return (server) => {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const wrapped = async (args, extra) => {
            var _a;
            // Get auth context from the server
            const context = getRequestContext(server);
            if (!(context === null || context === void 0 ? void 0 : context.authInfo)) {
                throw new Error(`Authentication required for tool "${name}". Ensure a valid bearer token is provided.`);
            }
            const { authInfo, descopeConfig } = context;
            // Scope validation
            if (requiredScopes.length) {
                const missing = requiredScopes.filter((s) => { var _a; return !((_a = authInfo.scopes) === null || _a === void 0 ? void 0 : _a.includes(s)); });
                if (missing.length) {
                    const userScopes = ((_a = authInfo.scopes) === null || _a === void 0 ? void 0 : _a.join(", ")) || "none";
                    throw new Error(`Tool "${name}" requires scopes: ${requiredScopes.join(", ")}. ` +
                        `User has scopes: ${userScopes}. ` +
                        `Missing: ${missing.join(", ")}. ` +
                        `Request these scopes during authentication.`);
                }
            }
            // getOutboundToken bound to this request
            const getOutboundTokenFn = (appId, scopes) => descopeConfig
                ? getOutboundToken(appId, authInfo, descopeConfig, scopes)
                : Promise.resolve(null);
            const authExtra = {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                ...extra,
                authInfo,
                getOutboundToken: getOutboundTokenFn,
            };
            // Call user-supplied handler
            return config.inputSchema
                ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    cb(args, authExtra)
                : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    cb(authExtra);
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return server.registerTool(name, config, wrapped);
    };
}
/* -----------------------------------------------------------------------
 * Object-based configuration API
 * -------------------------------------------------------------------- */
/**
 * Defines an authenticated tool using object-based configuration.
 * This provides a more ergonomic API compared to registerAuthenticatedTool.
 *
 * @example
 * ```typescript
 * const getUserTool = defineTool({
 *   name: "get_user",
 *   description: "Get user information",
 *   input: z.object({ userId: z.string() }),
 *   scopes: ["profile"],
 *   handler: async (args, extra) => {
 *     const externalToken = await extra.getOutboundToken('external-app-id', ['read']);
 *     return {
 *       content: [{ type: "text", text: JSON.stringify({ userId: args.userId }) }]
 *     };
 *   }
 * });
 * ```
 */
export function defineTool(cfg) {
    if (cfg.input) {
        // With input schema
        return registerAuthenticatedTool(cfg.name, {
            title: cfg.title,
            description: cfg.description,
            inputSchema: cfg.input,
            outputSchema: cfg.output,
            annotations: cfg.annotations,
        }, 
        // the cast is safe; types already guarantee shape
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        cfg.handler, cfg.scopes);
    }
    else {
        // Without input schema
        return registerAuthenticatedTool(cfg.name, {
            title: cfg.title,
            description: cfg.description,
            outputSchema: cfg.output,
            annotations: cfg.annotations,
        }, 
        // the cast is safe; types already guarantee shape
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        cfg.handler, cfg.scopes);
    }
}
//# sourceMappingURL=utils.js.map