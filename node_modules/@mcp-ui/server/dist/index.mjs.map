{"version":3,"file":"index.mjs","sources":["../src/types.ts","../src/utils.ts","../src/index.ts"],"sourcesContent":["import type { Resource } from '@modelcontextprotocol/sdk/types.js';\n\n// Primary identifier for the resource. Starts with ui://`\nexport type URI = `ui://${string}`;\n\n// text/html for rawHtml content, text/uri-list for externalUrl content\nexport type MimeType =\n  | 'text/html'\n  | 'text/uri-list'\n  | 'application/vnd.mcp-ui.remote-dom+javascript; framework=react'\n  | 'application/vnd.mcp-ui.remote-dom+javascript; framework=webcomponents';\n\nexport type HTMLTextContent = {\n  uri: URI;\n  mimeType: MimeType;\n  text: string; // HTML content (for mimeType `text/html`), or iframe URL (for mimeType `text/uri-list`)\n  blob?: never;\n  _meta?: Record<string, unknown>;\n};\n\nexport type Base64BlobContent = {\n  uri: URI;\n  mimeType: MimeType;\n  blob: string; //  Base64 encoded HTML content (for mimeType `text/html`), or iframe URL (for mimeType `text/uri-list`)\n  text?: never;\n  _meta?: Record<string, unknown>;\n};\n\nexport type ResourceContentPayload =\n  | { type: 'rawHtml'; htmlString: string }\n  | { type: 'externalUrl'; iframeUrl: string }\n  | {\n      type: 'remoteDom';\n      script: string;\n      framework: 'react' | 'webcomponents';\n    };\n\nexport interface CreateUIResourceOptions {\n  uri: URI;\n  content: ResourceContentPayload;\n  encoding: 'text' | 'blob';\n  // specific mcp-ui metadata\n  uiMetadata?: UIResourceMetadata;\n  // additional metadata to be passed on _meta\n  metadata?: Record<string, unknown>;\n  // additional resource props to be passed on resource (i.e. annotations)\n  resourceProps?: UIResourceProps;\n}\n\nexport type UIResourceProps = Omit<Partial<Resource>, 'uri' | 'mimeType'>;\n\nexport const UIMetadataKey = {\n  PREFERRED_FRAME_SIZE: 'preferred-frame-size',\n  INITIAL_RENDER_DATA: 'initial-render-data',\n} as const;\n\nexport const UI_METADATA_PREFIX = 'mcpui.dev/ui-';\n\nexport type UIResourceMetadata = {\n  [UIMetadataKey.PREFERRED_FRAME_SIZE]?: [string, string];\n  [UIMetadataKey.INITIAL_RENDER_DATA]?: Record<string, unknown>;\n};\n\nexport type UIActionType = 'tool' | 'prompt' | 'link' | 'intent' | 'notify';\n\ntype GenericActionMessage = {\n  messageId?: string;\n};\n\nexport type UIActionResultToolCall = GenericActionMessage & {\n  type: 'tool';\n  payload: {\n    toolName: string;\n    params: Record<string, unknown>;\n  };\n};\n\nexport type UIActionResultPrompt = GenericActionMessage & {\n  type: 'prompt';\n  payload: {\n    prompt: string;\n  };\n};\n\nexport type UIActionResultLink = GenericActionMessage & {\n  type: 'link';\n  payload: {\n    url: string;\n  };\n};\n\nexport type UIActionResultIntent = GenericActionMessage & {\n  type: 'intent';\n  payload: {\n    intent: string;\n    params: Record<string, unknown>;\n  };\n};\n\nexport type UIActionResultNotification = GenericActionMessage & {\n  type: 'notify';\n  payload: {\n    message: string;\n  };\n};\n\nexport type UIActionResult =\n  | UIActionResultToolCall\n  | UIActionResultPrompt\n  | UIActionResultLink\n  | UIActionResultIntent\n  | UIActionResultNotification;\n","import type { CreateUIResourceOptions, UIResourceProps } from './types.js';\nimport { UI_METADATA_PREFIX } from './types.js';\n\nexport function getAdditionalResourceProps(\n  resourceOptions: Partial<CreateUIResourceOptions>,\n): UIResourceProps {\n  const additionalResourceProps = { ...(resourceOptions.resourceProps ?? {}) } as UIResourceProps;\n\n  // prefix ui specific metadata with the prefix to be recognized by the client\n  if (resourceOptions.uiMetadata || resourceOptions.metadata) {\n    const uiPrefixedMetadata = Object.fromEntries(\n      Object.entries(resourceOptions.uiMetadata ?? {}).map(([key, value]) => [\n        `${UI_METADATA_PREFIX}${key}`,\n        value,\n      ]),\n    );\n    // allow user defined _meta to override ui metadata\n    additionalResourceProps._meta = {\n      ...uiPrefixedMetadata,\n      ...(resourceOptions.metadata ?? {}),\n      ...(additionalResourceProps._meta ?? {}),\n    };\n  }\n\n  return additionalResourceProps;\n}\n\n/**\n * Robustly encodes a UTF-8 string to Base64.\n * Uses Node.js Buffer if available, otherwise TextEncoder and btoa.\n * @param str The string to encode.\n * @returns Base64 encoded string.\n */\nexport function utf8ToBase64(str: string): string {\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str, 'utf-8').toString('base64');\n  } else if (typeof TextEncoder !== 'undefined' && typeof btoa !== 'undefined') {\n    const encoder = new TextEncoder();\n    const uint8Array = encoder.encode(str);\n    // Efficiently convert Uint8Array to binary string, handling large arrays in chunks\n    let binaryString = '';\n    // 8192 is a common chunk size used in JavaScript for performance reasons.\n    // It tends to align well with internal buffer sizes and memory page sizes,\n    // and it's small enough to avoid stack overflow errors with String.fromCharCode.\n    const CHUNK_SIZE = 8192;\n    for (let i = 0; i < uint8Array.length; i += CHUNK_SIZE) {\n      binaryString += String.fromCharCode(...uint8Array.slice(i, i + CHUNK_SIZE));\n    }\n    return btoa(binaryString);\n  } else {\n    console.warn(\n      'MCP-UI SDK: Buffer API and TextEncoder/btoa not available. Base64 encoding might not be UTF-8 safe.',\n    );\n    try {\n      return btoa(str);\n    } catch (e) {\n      throw new Error(\n        'MCP-UI SDK: Suitable UTF-8 to Base64 encoding method not found, and fallback btoa failed.',\n      );\n    }\n  }\n}\n","import {\n  Base64BlobContent,\n  CreateUIResourceOptions,\n  HTMLTextContent,\n  MimeType,\n  UIActionResult,\n  UIActionResultLink,\n  UIActionResultNotification,\n  UIActionResultPrompt,\n  UIActionResultIntent,\n  UIActionResultToolCall,\n} from './types.js';\nimport { getAdditionalResourceProps, utf8ToBase64 } from './utils.js';\n\nexport type UIResource = {\n  type: 'resource';\n  resource: HTMLTextContent | Base64BlobContent;\n};\n\n/**\n * Creates a UIResource.\n * This is the object that should be included in the 'content' array of a toolResult.\n * @param options Configuration for the interactive resource.\n * @returns a UIResource.\n */\nexport function createUIResource(options: CreateUIResourceOptions): UIResource {\n  let actualContentString: string;\n  let mimeType: MimeType;\n\n  if (options.content.type === 'rawHtml') {\n    if (!options.uri.startsWith('ui://')) {\n      throw new Error(\"MCP-UI SDK: URI must start with 'ui://' when content.type is 'rawHtml'.\");\n    }\n    actualContentString = options.content.htmlString;\n    if (typeof actualContentString !== 'string') {\n      throw new Error(\n        \"MCP-UI SDK: content.htmlString must be provided as a string when content.type is 'rawHtml'.\",\n      );\n    }\n    mimeType = 'text/html';\n  } else if (options.content.type === 'externalUrl') {\n    if (!options.uri.startsWith('ui://')) {\n      throw new Error(\n        \"MCP-UI SDK: URI must start with 'ui://' when content.type is 'externalUrl'.\",\n      );\n    }\n    actualContentString = options.content.iframeUrl;\n    if (typeof actualContentString !== 'string') {\n      throw new Error(\n        \"MCP-UI SDK: content.iframeUrl must be provided as a string when content.type is 'externalUrl'.\",\n      );\n    }\n    mimeType = 'text/uri-list';\n  } else if (options.content.type === 'remoteDom') {\n    if (!options.uri.startsWith('ui://')) {\n      throw new Error(\"MCP-UI SDK: URI must start with 'ui://' when content.type is 'remoteDom'.\");\n    }\n    actualContentString = options.content.script;\n    if (typeof actualContentString !== 'string') {\n      throw new Error(\n        \"MCP-UI SDK: content.script must be provided as a string when content.type is 'remoteDom'.\",\n      );\n    }\n    mimeType = `application/vnd.mcp-ui.remote-dom+javascript; framework=${options.content.framework}`;\n  } else {\n    // This case should ideally be prevented by TypeScript's discriminated union checks\n    const exhaustiveCheckContent: never = options.content;\n    throw new Error(`MCP-UI SDK: Invalid content.type specified: ${exhaustiveCheckContent}`);\n  }\n\n  let resource: UIResource['resource'];\n\n  switch (options.encoding) {\n    case 'text':\n      resource = {\n        uri: options.uri,\n        mimeType: mimeType as MimeType,\n        text: actualContentString,\n        ...getAdditionalResourceProps(options),\n      };\n      break;\n    case 'blob':\n      resource = {\n        uri: options.uri,\n        mimeType: mimeType as MimeType,\n        blob: utf8ToBase64(actualContentString),\n        ...getAdditionalResourceProps(options),\n      };\n      break;\n    default: {\n      const exhaustiveCheck: never = options.encoding;\n      throw new Error(`MCP-UI SDK: Invalid encoding type: ${exhaustiveCheck}`);\n    }\n  }\n\n  return {\n    type: 'resource',\n    resource: resource,\n  };\n}\n\nexport type { CreateUIResourceOptions, ResourceContentPayload, UIActionResult } from './types.js';\n\nexport function postUIActionResult(result: UIActionResult): void {\n  if (window.parent) {\n    window.parent.postMessage(result, '*');\n  }\n}\n\nexport const InternalMessageType = {\n  UI_MESSAGE_RECEIVED: 'ui-message-received',\n  UI_MESSAGE_RESPONSE: 'ui-message-response',\n\n  UI_SIZE_CHANGE: 'ui-size-change',\n\n  UI_LIFECYCLE_IFRAME_READY: 'ui-lifecycle-iframe-ready',\n  UI_LIFECYCLE_IFRAME_RENDER_DATA: 'ui-lifecycle-iframe-render-data',\n};\n\nexport const ReservedUrlParams = {\n  WAIT_FOR_RENDER_DATA: 'waitForRenderData',\n} as const;\n\nexport function uiActionResultToolCall(\n  toolName: string,\n  params: Record<string, unknown>,\n): UIActionResultToolCall {\n  return {\n    type: 'tool',\n    payload: {\n      toolName,\n      params,\n    },\n  };\n}\n\nexport function uiActionResultPrompt(prompt: string): UIActionResultPrompt {\n  return {\n    type: 'prompt',\n    payload: {\n      prompt,\n    },\n  };\n}\n\nexport function uiActionResultLink(url: string): UIActionResultLink {\n  return {\n    type: 'link',\n    payload: {\n      url,\n    },\n  };\n}\n\nexport function uiActionResultIntent(\n  intent: string,\n  params: Record<string, unknown>,\n): UIActionResultIntent {\n  return {\n    type: 'intent',\n    payload: {\n      intent,\n      params,\n    },\n  };\n}\n\nexport function uiActionResultNotification(message: string): UIActionResultNotification {\n  return {\n    type: 'notify',\n    payload: {\n      message,\n    },\n  };\n}\n"],"names":["UI_METADATA_PREFIX","getAdditionalResourceProps","resourceOptions","additionalResourceProps","uiPrefixedMetadata","key","value","utf8ToBase64","str","uint8Array","binaryString","CHUNK_SIZE","i","createUIResource","options","actualContentString","mimeType","exhaustiveCheckContent","resource","exhaustiveCheck","postUIActionResult","result","InternalMessageType","ReservedUrlParams","uiActionResultToolCall","toolName","params","uiActionResultPrompt","prompt","uiActionResultLink","url","uiActionResultIntent","intent","uiActionResultNotification","message"],"mappings":"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"}