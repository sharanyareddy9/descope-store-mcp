import { Resource } from '@modelcontextprotocol/sdk/types.js';

export type URI = `ui://${string}`;
export type MimeType = 'text/html' | 'text/uri-list' | 'application/vnd.mcp-ui.remote-dom+javascript; framework=react' | 'application/vnd.mcp-ui.remote-dom+javascript; framework=webcomponents';
export type HTMLTextContent = {
    uri: URI;
    mimeType: MimeType;
    text: string;
    blob?: never;
    _meta?: Record<string, unknown>;
};
export type Base64BlobContent = {
    uri: URI;
    mimeType: MimeType;
    blob: string;
    text?: never;
    _meta?: Record<string, unknown>;
};
export type ResourceContentPayload = {
    type: 'rawHtml';
    htmlString: string;
} | {
    type: 'externalUrl';
    iframeUrl: string;
} | {
    type: 'remoteDom';
    script: string;
    framework: 'react' | 'webcomponents';
};
export interface CreateUIResourceOptions {
    uri: URI;
    content: ResourceContentPayload;
    encoding: 'text' | 'blob';
    uiMetadata?: UIResourceMetadata;
    metadata?: Record<string, unknown>;
    resourceProps?: UIResourceProps;
}
export type UIResourceProps = Omit<Partial<Resource>, 'uri' | 'mimeType'>;
export declare const UIMetadataKey: {
    readonly PREFERRED_FRAME_SIZE: "preferred-frame-size";
    readonly INITIAL_RENDER_DATA: "initial-render-data";
};
export declare const UI_METADATA_PREFIX = "mcpui.dev/ui-";
export type UIResourceMetadata = {
    [UIMetadataKey.PREFERRED_FRAME_SIZE]?: [string, string];
    [UIMetadataKey.INITIAL_RENDER_DATA]?: Record<string, unknown>;
};
export type UIActionType = 'tool' | 'prompt' | 'link' | 'intent' | 'notify';
type GenericActionMessage = {
    messageId?: string;
};
export type UIActionResultToolCall = GenericActionMessage & {
    type: 'tool';
    payload: {
        toolName: string;
        params: Record<string, unknown>;
    };
};
export type UIActionResultPrompt = GenericActionMessage & {
    type: 'prompt';
    payload: {
        prompt: string;
    };
};
export type UIActionResultLink = GenericActionMessage & {
    type: 'link';
    payload: {
        url: string;
    };
};
export type UIActionResultIntent = GenericActionMessage & {
    type: 'intent';
    payload: {
        intent: string;
        params: Record<string, unknown>;
    };
};
export type UIActionResultNotification = GenericActionMessage & {
    type: 'notify';
    payload: {
        message: string;
    };
};
export type UIActionResult = UIActionResultToolCall | UIActionResultPrompt | UIActionResultLink | UIActionResultIntent | UIActionResultNotification;
export {};
//# sourceMappingURL=types.d.ts.map